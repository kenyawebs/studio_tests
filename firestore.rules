
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /users/{userId} {
      allow read, update, delete: if isOwner(userId);
      allow create: if request.auth != null;
    }

    // Journal Entries: A user can only read, create, update, or delete their own entries.
    // This stricter read rule solves the query permission issue.
    match /journalEntries/{entryId} {
       allow read, update, delete: if request.auth != null && isOwner(resource.data.userId);
       allow create: if request.auth != null;
    }
    
    // Social Feed Posts: All posts are public to read.
    // Users can only create, update, or delete their own posts.
    match /posts/{postId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && isOwner(resource.data.userId);
    }

    // Prayer Requests: All requests are public to read.
    // Users can only create, update, or delete their own requests.
    match /prayerRequests/{requestId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && isOwner(resource.data.userId);
      
      // Allow any authenticated user to add a shard for the distributed counter
      match /counter_shards/{shardId} {
        allow create: if request.auth != null;
      }
    }
  }
}
