
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can only read and write their own profile document.
    match /users/{userId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }

    // Journal Entries are private. Users can only manage their own.
    match /journalEntries/{entryId} {
      allow read, write, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    // Prayer Requests are public to read. Users can only create/update/delete their own.
    match /prayerRequests/{requestId} {
      allow read: if true;
      allow update(data), delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Special rule for the distributed counter extension
      match /counter_shards/{shardId} {
        allow write: if true;
      }
    }

    // Social Feed Posts are public to read. Users can only create/delete their own.
    // Liking (update) is allowed by any authenticated user.
    match /posts/{postId} {
      allow read: if true;
      allow update: if request.auth != null; // Allows any logged-in user to like/unlike
      allow delete, create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Placeholder rules for future features. Admins can manage, users can submit.
    match /events/{eventId} {
      allow read: if true;
      // In a real app, write access would be restricted to admins or organizers.
      allow write: if request.auth != null; 
    }
    
    match /mentorApplications/{appId} {
      // Only admins should be able to read/write applications.
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      allow create: if request.auth != null;
    }

  }
}
