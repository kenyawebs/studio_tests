
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // User profiles are readable by anyone, but only the owner can write.
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Journal Entries: Only the owner can read or write their own entries.
    match /journalEntries/{entryId} {
      // A user can get their own entry, or list their own entries.
      // The client-side query MUST contain `where("userId", "==", request.auth.uid)` for list to work.
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;

      // Writes are fully secure.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Public feeds are readable by any logged-in user. Writes are restricted.
    match /prayerRequests/{requestId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Allow any auth'd user to update (for likes/prayers)
      allow update: if request.auth != null;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
      
      // Rules for the distributed counter extension
      match /counter_shards/{shardId} {
        allow create: if true;
      }
    }
    
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
  }
}
