
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Default deny all reads and writes. This is a security best practice.
    match /{document=**} {
      allow read, write: if false;
    }

    // Users: Can read/write their own profile, but not other users' profiles.
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Posts: All logged-in users can read. Only owners can create, update, delete.
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Prayer Requests: All logged-in users can read. Only owners can create/update.
    match /prayerRequests/{requestId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && resource.data.userId == request.auth.uid;

      // Allow any logged-in user to trigger the distributed counter for praying
      match /counter_shards/{shardId} {
        allow create: if request.auth != null;
      }
    }

    // Journal Entries: Users can only create entries for themselves.
    // They can read their own entries OR any public entries.
    // They can only update/delete their own entries.
    match /journalEntries/{entryId} {
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || resource.data.isPublic == true);
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
  }
}
