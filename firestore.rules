
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for admin role
    function isAdmin() {
      return request.auth.token.admin == true;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users: Can read/write their own profile. Admins can read anyone's profile.
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false; // Disallow deleting user profiles
    }

    // Journal Entries: Private to the user unless public. Admins can read all.
    match /journalEntries/{entryId} {
      allow read: if (isOwner(resource.data.userId) || resource.data.isPublic == true) || isAdmin();
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if isOwner(resource.data.userId) || isAdmin();
    }

    // Prayer Requests: Any authenticated user can read. Only owner can update/delete. Admins have full access.
    match /prayerRequests/{requestId} {
      allow read: if request.auth != null;
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if isOwner(resource.data.userId) || isAdmin();
      
      // Rules for the distributed counter subcollection
      match /counter_shards/{shardId} {
        allow create: if request.auth != null; // Allow any authenticated user to trigger an increment
        allow read, update, delete: if false; // Nobody can read/update/delete shards directly
      }
    }

    // Social Feed Posts: Any authenticated user can read. Only owner can update/delete. Admins have full access.
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if isOwner(resource.data.userId) || isAdmin();
    }
  }
}
