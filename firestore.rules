
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read/write their own profile
    match /users/{userId} {
      // A user can read their own profile
      allow read: if request.auth != null && request.auth.uid == userId;
      // A user can create their own profile, ensuring the UID matches
      allow create: if request.auth != null && request.auth.uid == userId && request.resource.data.uid == userId;
      // A user can update their own profile
      allow update: if request.auth != null && request.auth.uid == userId;
      // Disallow deletion of user profiles for data integrity
      allow delete: if false;
    }
    
    // Journal entries can be read or written by the owner
    match /journalEntries/{entryId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Prayer requests can be read by any authenticated user
    match /prayerRequests/{requestId} {
      allow read: if request.auth != null;
      // Created/written by the owner. The prayCount subcollection is handled by extensions/backend.
      allow write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }

    // Shards for distributed counters are write-only by anyone to allow increments
    match /prayerRequests/{requestId}/counter_shards/{shardId} {
      allow read: if false;
      allow write: if true;
    }
    
    // Social posts can be read by any authenticated user
    match /posts/{postId} {
      allow read: if request.auth != null;
      // Like/unlike is handled by transaction, so we need a general write rule.
      // We will secure this by only allowing specific fields to be updated if needed,
      // but for now, only the owner can write.
      allow write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
  }
}
