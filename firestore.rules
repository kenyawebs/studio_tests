rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users can only read/write their own profile
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId;
    }

    // Journal entries are private to the user
    match /journalEntries/{entryId} {
        // Allow a user to list only their own entries.
        allow list: if request.auth != null && request.auth.uid == request.query.where.userId;
        // Allow a user to get, update, or delete their own specific entry.
        allow get, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
        // Allow a user to create an entry for themselves.
        allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }

    // Prayer requests are public, but writing requires auth
    match /prayerRequests/{requestId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Disallow direct updates/deletes for now. These would be handled via transactions or cloud functions.
      allow update, delete: if false;

      // Allow authenticated users to add to the counter subcollection for likes.
      match /counter_shards/{shardId} {
        allow create: if request.auth != null;
      }
    }

    // Social feed posts are public, but writing requires auth
    match /posts/{postId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Allow updates only for liking/unliking, which is handled by a transaction.
      // A user can only delete their own posts.
      allow update: if request.auth != null;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
  }
}
